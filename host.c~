#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netdb.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <netinet/in.h>
#include <netpacket/packet.h>
#include <net/ethernet.h>
#include <net/if.h>
#include <arpa/inet.h>
#include <errno.h>
#include <linux/types.h>
#include <asm/types.h>
#include <linux/netlink.h>
#include <signal.h>
#include <math.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>

#ifndef __IMP2_H__
#define __IMP2_H__

#define IMP2_U_PID   0
#define IMP2_K_MSG   1
#define IMP2_CLOSE   2

#define NL_IMP2      31
#define __VM 16
#define DUR_TIME 100 //ms

struct packet_info
{
    __u32 src;
    __u32 dest;
    __u16 rate;
};

#endif

struct msg_to_kernel
{
    struct nlmsghdr hdr;
};

struct u_packet_info
{
    struct nlmsghdr hdr;
    struct packet_info ack_info;
};

static int skfd;

void read_data(float *wx, float *Bx, int (*linkstat)[__VM+1])
{
    FILE *bwp, *linkstatp;
    int i,j;

    if ((bwp = fopen("bw.txt","r"))==NULL) {
        printf("Can't open file bw.txt!");
        exit(0);
    }
    if ((linkstatp = fopen("linkstat.txt","r"))==NULL) {
        printf("Can't open file linkstat.txt!");
        exit(0);
    }

    for (i=1; i<=__VM; i++) {
        fscanf(bwp, "%f", Bx+i);
    }

    for (i=1; i<=__VM; i++) {
        fscanf(bwp, "%f", wx+i);
    }

    for (i=1; i<=__VM; i++) {
        for (j=1; j<=__VM; j++) {
            fscanf(linkstatp, "%d", &(linkstat[i][j]));
        }
    }

    fclose(bwp);
    fclose(linkstatp);

    return;
}

static void sig_int(int signo)
{
    struct sockaddr_nl kpeer;
    struct msg_to_kernel message;

    memset(&kpeer, 0, sizeof(kpeer));
    kpeer.nl_family = AF_NETLINK;
    kpeer.nl_pid    = 0;
    kpeer.nl_groups = 0;

    memset(&message, 0, sizeof(message));
    message.hdr.nlmsg_len = NLMSG_LENGTH(0);
    message.hdr.nlmsg_flags = 0;
    message.hdr.nlmsg_type = IMP2_CLOSE;
    message.hdr.nlmsg_pid = getpid();

    sendto(skfd, &message, message.hdr.nlmsg_len, 0, (struct sockaddr *)(&kpeer), sizeof(kpeer));

    close(skfd);
    exit(0);
}

void algori(float *wx, float *Bx, int (*linkstat)[__VM+1],float (*wi)[__VM+1],float (*Bi)[__VM+1])
{
    int t,k,x,y,i,j;
    float a,b;

    //Compute the matrix of wi.
    for (x=1; x<=__VM; x++) {
        for (j=1,k=0; j<=__VM; j++) {
            k += linkstat[x][j];
        }
        if(k == 0) {
            for (y=1; y<=__VM; y++) {
                wi[x][y] = 0;
            }
        }
        else {
            for (y=1; y<=__VM; y++) {
                if (linkstat[x][y] == 0) {
                    wi[x][y] = 0;
                }
                else {
                    for (i=1,t=0; i<=__VM; i++){
                        t += linkstat[i][y];
                    }
                    wi[x][y] = wx[x]/k + wx[y]/t;
                }
            }
        }
    }

    //Compute the matrix of Bi.
    for (x=1; x<=__VM; x++) {
        for (j=1,k=0; j<=__VM; j++) {
            k += linkstat[x][j];
        }
        if(k == 0) {
            for (y=1; y<=__VM; y++) {
                Bi[x][y] = 0;
            }
        }
        else {
            for (y=1; y<=__VM; y++) {
                if (linkstat[x][y] == 0) {
                    Bi[x][y] = 0;
                }
                else {
                    for (j=1,a=0; j<=__VM; j++) {
                        a += linkstat[x][j] * wx[j];
                    }
                    for (i=1,b=0; i<=__VM; i++){
                        b += linkstat[i][y] * wx[i];
                    }
                    a = Bx[x]*wx[y]/k;
                    b = Bx[y]*wx[x]/t;
                    if (a > b) {
                        Bi[x][y] = b;
                    }
                    else {
                        Bi[x][y] = a;
                    }
                }
            }
        }
    }

}

int main()
{
    struct sockaddr_nl local;
    struct sockaddr_nl kpeer;
    int kpeerlen;
    struct msg_to_kernel message;
    struct u_packet_info info;
    int sendlen = 0;
    int rcvlen = 0;
    struct in_addr addr;

    float wx[__VM+1];
    int linkstat[__VM+1][__VM+1];
    float wi[__VM+1][__VM+1];
    float Bx[__VM+1];
    float Bi[__VM+1][__VM+1];
    float vi[__VM+1][__VM+1];
    int i,j,x,y;

    int d,s;
    float r;
    float alpha = 2;

    struct timeval tv;
    struct timezone tz;
    float curr_time,pre_time,dur_time;

    read_data(wx, Bx, linkstat);

    //Algorithm to get matrix Bi and wi.
    algori(wx, Bx, linkstat,wi,Bi);

    FILE * tempp;
    if ((tempp = fopen("vi.txt","w"))==NULL) {
	printf("Can't open file bw.txt!");
	exit(0);
    }

    for (i =1; i <= __VM; i++) {
	for (j =1; j <= __VM; j++) {
	    vi[i][j] = Bi[i][j];
	    fprintf(tempp, "%7.3f ", vi[i][j]);
	}
	fprintf(tempp, "\n");
    }
    fclose(tempp);

    skfd = socket(PF_NETLINK, SOCK_RAW, NL_IMP2);
    if(skfd < 0)
    {
	printf("can not create a netlink socket\n");
	exit(0);
    }

    memset(&local, 0, sizeof(local));
    local.nl_family = AF_NETLINK;
    local.nl_pid = getpid();
    local.nl_groups = 0;
    if(bind(skfd, (struct sockaddr*)&local, sizeof(local)) != 0)
    {
	printf("bind() error\n");
	return -1;
    }

    signal(SIGINT, sig_int);

    memset(&kpeer, 0, sizeof(kpeer));
    kpeer.nl_family = AF_NETLINK;
    kpeer.nl_pid = 0;
    kpeer.nl_groups = 0;

    memset(&message, 0, sizeof(message));
    message.hdr.nlmsg_len = NLMSG_LENGTH(0);
    message.hdr.nlmsg_flags = 0;
    message.hdr.nlmsg_type = IMP2_U_PID;
    message.hdr.nlmsg_pid = local.nl_pid;

    sendto(skfd, &message, message.hdr.nlmsg_len, 0, (struct sockaddr*)&kpeer, sizeof(kpeer));

    gettimeofday (&tv, &tz);
    pre_time = tv.tv_sec+tv.tv_usec*1.0/1000000;

    int fd;
	char *start;
	struct stat sb;
	float f = 000.002;
	fd = open("vi.txt", O_RDWR); /* 打开vi.txt */
	fstat(fd, &sb); /* 取得文件大小 */
	start = mmap(NULL, sb.st_size, PROT_WRITE, MAP_SHARED, fd, 0);
	if(start == MAP_FAILED) /* 判断是否映射成功 */
		return;

    while(1) {
        kpeerlen = sizeof(struct sockaddr_nl);
        rcvlen = recvfrom(skfd, &info, sizeof(struct u_packet_info), 0, (struct sockaddr*)&kpeer, &kpeerlen);

        /*//info.ack_info,those three data are used to set rate limitation
        addr.s_addr = info.ack_info.src;
        printf("src: %s,", inet_ntoa(addr));
        printf("src: %d\n", info.ack_info.src>>24);
        addr.s_addr = info.ack_info.dest;
        //printf("dest: %s,", inet_ntoa(addr));
        //printf("dest: %d, ", info.ack_info.dest);
        //printf("rate: %d\n",info.ack_info.rate);*/
        d = info.ack_info.dest>>24;
        s = info.ack_info.src>>24;
        r = info.ack_info.rate*1.0/100;
        gettimeofday (&tv, &tz);
        curr_time = tv.tv_sec+tv.tv_usec*1.0/1000000;
        //dur_time = curr_time - pre_time;
        vi[d][s] = vi[d][s]*(pow(wi[d][s]*r,alpha*(DUR_TIME*1.0/1000)));
        if (Bi[d][s] > vi[d][s]) {
			vi[d][s] = Bi[d][s];
        }
		if (vi[d][s] >1000) {
			vi[d][s] =999.99;
		}
		addr.s_addr = info.ack_info.src;
        printf("src: %s,", inet_ntoa(addr));
        printf("rate: %d    ",info.ack_info.rate);
		printf("%f\n",vi[d][s]);
        char ta[8] = "  0.000";
		int a, b, p, q,f;
		f = (int)(vi[d][s]*1000);
		a = f/1000;
		b = f % 1000;
		if ( a ) {
			p = a/100;
			q = a%100;
			if (p)
				{ta[0] = '0' + p;}
			a = q;
			p = a/10;
			q = a%10;
			if (p)
				{ta[1] = '0' + p;}
			else
				{ta[1] = '0';}
			if (q)
				{ta[2] = '0' + q;}
		}
		if ( b ){
			p = b/100;
			q = b%100;
			if (p)
				{ta[4] = '0' + p;}
			b = q;
			p = b/10;
			q = b%10;
			if (p)
				{ta[5] = '0' + p;}
			if (q)
				{ta[6] = '0' + q;}
		}
		strncpy(start+(d-1)*129+(s-1)*8, ta, 7);

        
	}
	munmap(start, sb.st_size); // 解除映射 
	close(fd);

	close(skfd);

	return 0;
}
